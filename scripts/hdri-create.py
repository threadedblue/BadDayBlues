import bpy, math
# Generated by GPT.
# Camera: panoramic equirectangular
if "HDRI_Cam" not in bpy.data.objects:
    cam_data = bpy.data.cameras.new("HDRI_Cam")
    cam = bpy.data.objects.new("HDRI_Cam", cam_data)
    bpy.context.collection.objects.link(cam)
else:
    cam = bpy.data.objects["HDRI_Cam"]

bpy.context.view_layer.objects.active = cam
cam.location = (0, 0, 1.7)
cam.rotation_euler = (0, 0, 0)
cam.data.type = 'PANO'
cam.data.panorama_type = 'EQUIRECTANGULAR'

# Output 8K 2:1 EXR
scene = bpy.context.scene
scene.render.engine = 'CYCLES'
scene.cycles.samples = 1024
scene.render.resolution_x = 8192
scene.render.resolution_y = 4096
scene.render.image_settings.file_format = 'OPEN_EXR'
scene.render.image_settings.color_depth = '32'  # 32-bit float
scene.render.image_settings.exr_codec = 'ZIP'
scene.view_settings.view_transform = 'Filmic'
scene.render.filepath = "//MyCustomHDRI_8k.exr"

# Ground plane
if "HDRI_Ground" not in bpy.data.objects:
    bpy.ops.mesh.primitive_plane_add(size=400)
    ground = bpy.context.active_object
    ground.name = "HDRI_Ground"
else:
    ground = bpy.data.objects["HDRI_Ground"]

# Two softboxes (area lights)
def add_area(name, loc, rot_deg, size=(8,6), power=3000):
    if name in bpy.data.objects: return bpy.data.objects[name]
    light_data = bpy.data.lights.new(name, type='AREA')
    light = bpy.data.objects.new(name, light_data)
    bpy.context.collection.objects.link(light)
    light.location = loc
    light.rotation_euler = tuple(math.radians(a) for a in rot_deg)
    light.data.shape = 'RECTANGLE'
    light.data.size = size[0]
    light.data.size_y = size[1]
    light.data.energy = power
    return light

add_area("Softbox_Key",  (6, -6, 5), (60, 0, 135), (10,8), 4000)
add_area("Softbox_Fill", (-7,  5, 4), (65, 0, -45), (12,9), 1500)

print("Panorama cam + EXR output + softboxes ready. Render to bake your HDRI.")
